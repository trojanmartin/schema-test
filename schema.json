{
	"type": "object",
	"properties": {
		"Tomra": {
			"type": "object",
			"properties": {
				"Active": {
					"type": [
						"boolean",
						"null"
					],
					"description": "True if TOMRA is active, otherwise false.",
					"default": true,
					"additionalProperties": {
    "type": "number"
  }
				},
				"Prefix": {
					"type": "string",
					"description": "TOMRA prefix.",
					"default": "981"
				},
				"StoreId": {
					"type": "string",
					"description": "TOMRA store id."
				},
				"ProductNumber": {
					"type": "string",
					"description": "TOMRA product number."
				},
				"RefundEnabled": {
					"type": [
						"boolean",
						"null"
					],
					"description": "True if TOMRA refund is available, otherwise false."
				},
				"IgnoreStoreId": {
					"type": [
						"boolean",
						"null"
					],
					"description": "True if TOMRA store id should be ignored, otherwise false."
				}
			},
			"description": "Tomra settings."
		},
		"ForecourtConfiguration": {
			"type": "object",
			"properties": {
				"DispenserSalesPriceMismatchHandle": {
					"enum": [
						"Reject",
						"UseDBPrice",
						"UseDBPriceWithDiscount",
						"UseDispenserPrice",
						"UseDispenserPriceWithDiscount",
						"UseLowerPrice",
						"UseLowerWithDispenserPriceAndDiscount",
						"UseLowerWithDBPriceAndDiscount",
						null
					],
					"description": "Dispenser sales price mismatch handle mode."
				},
				"DispenserTotalPriceMismatchHandle": {
					"enum": [
						"Reject",
						"UseQuantity",
						"UseDiscount",
						"UseOnlyPositiveDiscount",
						"UseDispenserAmount",
						null
					],
					"description": "Dispenser total price mismatch handle mode."
				}
			},
			"description": "Forecourt business configuration model."
		},
		"Recovery": {
			"type": "object",
			"properties": {
				"Sales": {
					"type": "integer",
					"description": "Sales recovery Id.",
					"default": 0
				},
				"Cash": {
					"type": "integer",
					"description": "Cash recovery Id.",
					"default": 0
				},
				"Closure": {
					"type": "integer",
					"description": "Closure recovery Id.",
					"default": 0
				}
			},
			"description": "Recovery settings."
		},
		"EventBus": {
			"type": "object",
			"properties": {
				"Host": {
					"type": "string",
					"description": "RabbitMQ server host name."
				},
				"VirtualHost": {
					"type": "string",
					"description": "RabbitMQ server virtual host."
				},
				"TlsServerName": {
					"type": "string",
					"description": "Tls server name."
				},
				"TlsPort": {
					"type": [
						"integer",
						"null"
					],
					"description": "Tls port."
				},
				"UseTls": {
					"type": "boolean",
					"description": "True when use tls."
				},
				"Port": {
					"type": "integer",
					"description": "RabbitMQ server port."
				},
				"RetryCount": {
					"type": "integer",
					"description": "Number of retries on failure.",
					"default": 5,
					"minimum": 1
				},
				"QueueName": {
					"type": "string",
					"description": "RabbitMQ queue name for receiving messages."
				}
			},
			"required": [
				"Host",
				"VirtualHost",
				"Port",
				"QueueName"
			],
			"description": "Event bus settings."
		},
		"Feature": {
			"type": "object",
			"properties": {
				"ExciseTaxEnabled": {
					"type": "boolean",
					"description": "Excise tax functionality enabled.",
					"default": false
				}
			},
			"description": "Feature settings."
		},
		"SalesSettings": {
			"type": "object",
			"properties": {
				"DoubleVat": {
					"$ref": "#/$defs/doubleVatEnum",
					"description": "Type of double vat.",
					"default": 1
				},
				"DefaultCancellationReason": {
					"type": "string",
					"description": "Default cancellation reason."
				},
				"ReceiptTailMessage": {
					"$ref": "#/$defs/iReadOnlyListOfString",
					"description": "Lines of custom receipt tail message."
				},
				"IncludePrintout": {
					"type": "boolean",
					"description": "Indicates if ]printout should be included in business documents (sales transaction, closure, etc.).",
					"default": true
				},
				"LoyaltyQuestionMode": {
					"enum": [
						"Never",
						"SaleStart",
						"SaleEnd",
						"SaleStartAndEnd",
						null
					],
					"description": "Loyalty question mode.",
					"default": 1
				},
				"LoyaltyQuestionText": {
					"type": "string",
					"description": "Text which will be shown as loyalty question."
				},
				"ReceiptNonTaxHeader": {
					"type": "string",
					"description": "Receipt non-tax header."
				},
				"ReceiptPartnerTaxInfo": {
					"type": "string",
					"description": "Receipt partner tax info."
				},
				"ReceiptLoyaltyText": {
					"type": "string",
					"description": "Receipt loyalty text, it should be printed when customer was not identified, to motivate customer."
				},
				"ReceiptLoyaltyPointsText": {
					"type": "string",
					"description": "Receipt loyalty text, when customer was identified and points was earned, if loyalty system provide the info. It can contain '{0}' which will be replaces with earned points."
				}
			},
			"description": "Sales settings for application."
		},
		"WetGoodsPriceChangeConfiguration": {
			"type": "object",
			"properties": {
				"HidePendingPriceChangesValue": {
					"type": [
						"boolean",
						"null"
					],
					"description": "Indicates if price change value should be hidden before is applied."
				},
				"NotificationPeriod": {
					"type": "string",
					"description": "How long price changes should be displayed in advance."
				}
			},
			"description": "Sales settings for applications."
		},
		"DryGoodsPriceChangeConfiguration": {
			"type": "object",
			"properties": {
				"HidePendingPriceChangesValue": {
					"type": [
						"boolean",
						"null"
					],
					"description": "Indicates if price change value should be hidden before is applied."
				},
				"NotificationPeriod": {
					"type": "string",
					"description": "How long price changes should be displayed in advance."
				}
			},
			"description": "Sales settings for applications."
		},
		"LoyaltyConfiguration": {
			"type": "object",
			"properties": {
				"LoyaltyCards": {
					"description": "Loyalty cards definition.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"CardName": {
								"type": "string",
								"description": "Card name."
							},
							"MatchPatterns": {
								"$ref": "#/$defs/iReadOnlyListOfString",
								"description": "Loyalty card number match patterns."
							},
							"PointsCollectionAllowed": {
								"type": "boolean",
								"description": "Allows to collect points."
							},
							"LoyaltyDiscountsAllowed": {
								"type": "boolean",
								"description": "Allows to apply loyalty discounts."
							},
							"LoyaltyCoupons": {
								"$ref": "#/$defs/iReadOnlyListOfLoyaltyCouponDefinition",
								"description": "Allowed loyalty coupons for the loyalty card."
							}
						},
						"description": "Loyalty card definition."
					}
				},
				"LoyaltyCoupons": {
					"$ref": "#/$defs/iReadOnlyListOfLoyaltyCouponDefinition",
					"description": "Generally allowed loyalty coupons, for all loyalty cards."
				}
			},
			"description": "Loyalty system configuration."
		},
		"ClosureSettings": {
			"type": "object",
			"properties": {
				"ClosureConfigurations": {
					"description": "List of closure configurations.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"Type": {
								"enum": [
									"POS",
									"Shift",
									null
								],
								"description": "Closure configuration type enumeration."
							},
							"CashCurrencies": {
								"$ref": "#/$defs/iReadOnlyListOfString",
								"description": "Currency ISO codes which should be included in closure."
							},
							"MinimalDeposit": {
								"$ref": "#/$defs/iReadOnlyListOfCurrencyValue",
								"description": "Minimal amount of specific currency which should be in cash location when closure was started."
							},
							"AutomatedDeposit": {
								"type": "boolean",
								"description": "Indicates if initial deposit should be made automatically.",
								"default": false
							},
							"AutomatedDepositAmount": {
								"$ref": "#/$defs/iReadOnlyListOfCurrencyValue",
								"description": "Amounts of automated deposit."
							},
							"MinimalDepositOverride": {
								"type": "boolean",
								"description": "Indicates if closure can be started with cash amount bellow Datapac.Posybe.Configuration.Model.ClosureConfiguration.MinimalDeposit.",
								"default": false
							},
							"DepositCashMovementTypeCode": {
								"type": "string",
								"description": "Cash movement type code, which should be used for initial deposit."
							},
							"AutomatedWithdrawal": {
								"type": "boolean",
								"description": "Indicates if there should be made automated cash withdrawal after closure.",
								"default": false
							},
							"WithdrawalMandatory": {
								"type": "boolean",
								"description": "Indicates if cash withdrawal is required after closure.",
								"default": false
							},
							"MinimalCashBalance": {
								"$ref": "#/$defs/iReadOnlyListOfCurrencyValue",
								"description": "Minimal amount which should be in cash location after closure."
							},
							"WithdrawalLimit": {
								"$ref": "#/$defs/iReadOnlyListOfCurrencyValue",
								"description": "Withdrawal cash limit for closure."
							},
							"WithdrawalCashMovementTypeCode": {
								"type": "string",
								"description": "Cash movement type code which should be used for cash withdrawal after closure."
							},
							"FiscalDayOpenMode": {
								"enum": [
									"AutoAtOpen",
									"AskAtOpen",
									"Off",
									null
								],
								"description": "Fiscal day open mode"
							},
							"FiscalDayCloseMode": {
								"enum": [
									"AutoAtClose",
									"AskAtClose",
									"Off",
									null
								],
								"description": "Fiscal day close mode."
							},
							"MaxCashCountAttempts": {
								"type": "integer",
								"description": "Maximum count of entering wrong counted MOPs. When maximum count is reached, last value is stored and closure continues.",
								"default": 1
							},
							"SaleOnlySameCashier": {
								"type": "boolean",
								"description": "Indicates if only cashier which open day can sell.",
								"default": true
							},
							"SettleBalanceWithdrawal": {
								"type": "boolean",
								"description": "Setting to force withdrawal of cash after closure and balance settlement.",
								"default": false
							},
							"SettleBalanceWithdrawalTypeCode": {
								"type": "string",
								"description": "Cash movement type code which should be used for automated withdrawal."
							},
							"SettleBalanceDepositTypeCode": {
								"type": "string",
								"description": "Cash movement type code which should be used for automated deposit."
							},
							"AutoWithdrawalMissingAmountHandling": {
								"enum": [
									"NoWithdrawal",
									"WithdrawAvailable",
									"DepositAndWithdraw",
									null
								],
								"description": "How to handle missing withdrawal amount."
							}
						},
						"description": "Specific closure configuration."
					}
				}
			},
			"description": "Definition for closure proces."
		},
		"DiscountConfiguration": {
			"type": "object",
			"properties": {
				"DiscountEngines": {
					"description": "List of available discount engines.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"Order": {
								"type": [
									"integer",
									"null"
								],
								"description": "Order of discount engines."
							},
							"Name": {
								"type": "string",
								"description": "Name of discount engine."
							},
							"Url": {
								"type": "string",
								"description": "Discount engine URL."
							},
							"DiscountResponseTimeout": {
								"type": "integer",
								"description": "Timeout for discount server response in milliseconds."
							}
						},
						"description": "Discount engine matrix."
					}
				},
				"DiscountEnginesCombinations": {
					"description": "Discount engines combinations matrix.",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "Discount configuration for application."
		},
		"CashDrawerConfiguration": {
			"type": "object",
			"properties": {
				"OpenCashDrawerMode": {
					"$ref": "#/$defs/openCashDrawerModeEnum",
					"description": "Open cash drawer mode.",
					"default": 3
				},
				"DieboldSmBusCashDrawer": {
					"type": [
						"object",
						"null"
					],
					"properties": {
						"Address": {
							"type": "string",
							"description": "Cash drawer address."
						}
					},
					"description": "Diebold SM bus cash drawer configuration."
				},
				"InitialDenominations": {
					"description": "Initial denomination.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"Value": {
								"type": [
									"number",
									"null"
								],
								"description": "Value of nominal for audit."
							},
							"Count": {
								"type": [
									"integer",
									"null"
								],
								"description": "Count of nominal for audit."
							},
							"DenominationType": {
								"enum": [
									"Banknote",
									"Coin",
									null
								],
								"description": "Denomination type."
							}
						},
						"description": "Cash audit nominal model."
					}
				}
			},
			"description": "Cash drawer configuration."
		},
		"PlatformSettings": {
			"type": "object",
			"properties": {
				"HealthUrl": {
					"type": [
						"string",
						"null"
					],
					"description": "Platform URL for checking platform state."
				}
			},
			"description": "Application settings."
		},
		"Telemetry": {
			"type": "object",
			"properties": {
				"ConnectionString": {
					"type": "string",
					"description": "Encrypted connection string for telemetry."
				},
				"OpenTelemetryEnabled": {
					"type": "boolean",
					"description": "True if telemetry enabled, otherwise false for disabled.",
					"default": false
				}
			},
			"description": "Telemetry settings."
		},
		"SiteControllerConfiguration": {
			"type": "object",
			"properties": {
				"BaseUrl": {
					"type": "string",
					"description": "Site controller hub URL."
				},
				"ApplicationToken": {
					"type": "string",
					"description": "Application token for authentication."
				},
				"ApplicationNumber": {
					"type": [
						"integer",
						"null"
					],
					"description": "Custom application Id for Site Controller. You can override POS number, which is used by default."
				},
				"ReloadViewDelay": {
					"$ref": "#/$defs/number",
					"description": "Reload view delay in milliseconds.",
					"default": 1000
				},
				"HubReconnectDelay": {
					"type": [
						"number",
						"null"
					],
					"description": "Site controller hub reconnect delay in milliseconds."
				},
				"DispenserTotalsTimeout": {
					"type": "integer",
					"description": "Specify how long to wait for dispenser totals to arrive in seconds.",
					"default": 30
				},
				"TankMeasurementTimeout": {
					"type": [
						"integer",
						"null"
					],
					"description": "Specify how long to wait for tank measurements to arrive in seconds."
				},
				"TankGuiRefreshTimeout": {
					"type": "integer",
					"description": "Refresh tank GUI timeout in milliseconds.",
					"default": 5000
				}
			},
			"description": "Site controller configuration."
		},
		"MopSettings": {
			"type": "object",
			"properties": {
				"MopTerminalAssignment": {
					"$ref": "#/$defs/iReadOnlyDictionaryOfStringAndString",
					"description": "MOP to terminal assignment."
				},
				"FleetCardsParsingMethods": {
					"$ref": "#/$defs/iReadOnlyDictionaryOfStringAndString",
					"description": "Custom mapping for fleet cards data parsing (customer, license plate, etc.) (temporary solution). Mapping is defined by pair Issuer.Code and Parsing method. This definition should be moved into card issuer definition."
				},
				"AllowedMopCodes": {
					"$ref": "#/$defs/iReadOnlyListOfString",
					"description": "List of allowed MoP codes. If empty, all MoP codes are allowed."
				}
			},
			"description": "Configuration for mop setup."
		},
		"SoundConfig": {
			"type": "object",
			"properties": {
				"Volume": {
					"$ref": "#/$defs/number",
					"description": "Volume configuration.",
					"default": 100
				}
			}
		},
		"UpdatesConfiguration": {
			"type": "object",
			"properties": {
				"UpdateManifestFilePath": {
					"type": "string",
					"description": "Full path to the update manifest file.",
					"default": "C:\\Datapac\\Update\\posybe2manifest.json"
				}
			},
			"description": "Application updates configuration."
		},
		"DispensersGridConfiguration": {
			"type": "object",
			"properties": {
				"Rows": {
					"type": [
						"integer",
						"null"
					],
					"description": "Number of rows."
				},
				"Columns": {
					"type": [
						"integer",
						"null"
					],
					"description": "Number of columns."
				},
				"Dispensers": {
					"description": "Dispensers configurations.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"DispenserNumber": {
								"type": [
									"integer",
									"null"
								],
								"description": "Dispenser number."
							},
							"Row": {
								"type": [
									"integer",
									"null"
								],
								"description": "Row where to disply dispenser in grid."
							},
							"Column": {
								"type": [
									"integer",
									"null"
								],
								"description": "Column where to disply dispenser in grid."
							},
							"CustomColor": {
								"type": "string",
								"description": "Custom background color of dispenser."
							}
						},
						"description": "Dispenser grid configuration."
					}
				}
			},
			"description": "Dispensers grid configuration."
		},
		"TransactionParking": {
			"type": "object",
			"properties": {
				"NotifyFrom": {
					"type": "string",
					"description": "Specify time when to display notification about parked transactions."
				},
				"NotifyTo": {
					"type": "string",
					"description": "Specify time when to disable sale when there are parked transactions."
				}
			},
			"description": "POS transaction parking configuration."
		}
	},
	"$defs": {
		"doubleVatEnum": {
			"enum": [
				"Default",
				"Takeaway",
				"Inhouse",
				"AskOnce",
				"AskEverytime"
			],
			"description": "Type of double vat."
		},
		"iReadOnlyListOfString": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"iReadOnlyListOfLoyaltyCouponDefinition": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"CouponName": {
						"type": "string",
						"description": "Coupon name."
					},
					"MatchPatterns": {
						"$ref": "#/$defs/iReadOnlyListOfString",
						"description": "Loyalty coupon number match patterns."
					}
				},
				"description": "Loyalty coupon definition."
			}
		},
		"iReadOnlyListOfCurrencyValue": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"CurrencyISOCode": {
						"type": "string",
						"description": "Currency ISO code."
					},
					"Value": {
						"type": [
							"number",
							"null"
						],
						"description": "Value."
					}
				},
				"description": "Currency value."
			}
		},
		"number": {
			"type": "number"
		},
		"openCashDrawerModeEnum": {
			"enum": [
				"OEC",
				"Sunmi",
				"None",
				"DieboldSMBus",
				"Fiscat"
			],
			"description": "Open cash drawer mode."
		},
		"iReadOnlyDictionaryOfStringAndString": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	}
}